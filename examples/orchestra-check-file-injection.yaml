tosca_definitions_version: tosca_simple_yaml_1_0

description: Router with Ext net and two internal networks


#####################################################################
# Imports
#####################################################################

imports:

  - https://raw.githubusercontent.com/aiorchestra/aiorchestra-asyncssh-plugin/0.1.2-stable/types.yaml
  - https://raw.githubusercontent.com/aiorchestra/aiorchestra-openstack-plugin/0.1.2-stable/types.yaml

#####################################################################
# Node types
#####################################################################

node_types:

  software_configuration_environment:
    derived_from: tosca.nodes.Root
    properties:
      remote_injection:
        type: string
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        create:
          implementation: aiorchestra.core.noop:noop
        start:
          implementation: aiorchestra.core.noop:noop
        stop:
          implementation: aiorchestra.core.noop:noop
        delete:
          implementation: aiorchestra.core.noop:noop

#####################################################################
# Topology
#####################################################################

topology_template:

  inputs:

    keystone_username:
      type: string

    keystone_password:
      type: string

    keystone_project_name:
      type: string

    keystone_url:
      type: string

    openstack_region:
      type: string

    # compute

    compute_name:
      type: string
      default: 'compute-vm'

    compute_image:
      type: string
      default: '6c3047c6-17b1-4aaf-a657-9229bb481e50'

    compute_flavor:
      type: string
      default: '196235bc-7ca5-4085-ac81-7e0242bda3f9'

    # network

    ext_net_name:
      type: string

    network_name_one:
      type: string

    # subnet

    subnet_name_one:
      type: string

    subnet_ip_version:
      type: int

    subnet_cidr_one:
      type: string

    subnet_pools_one:
      type: list

    subnet_dns_nameservers:
      type: list

    # router

    router_name:
      type: string

    # ports

    subnet_port_one:
      type: string

    # ssh

    ssh_keypair_name:
      type: string

    username:
      type: string

    ssh_port:
      type: int

    install_script:
      type: string

    local_file_path_for_injection:
      type: string

    remote_file_path_for_injection:
      type: string

#####################################################################
# Node templates
#####################################################################

  node_templates:

    auth:
      type: tosca.openstack.authorization_form
      properties:
        username: { get_input: keystone_username }
        password: { get_input: keystone_password }
        project_name:  { get_input: keystone_project_name }
        auth_url:  { get_input: keystone_url }
        region_name:  { get_input: openstack_region }

    orchestra_external_network:
      type: tosca.openstack.network
      properties:
        use_existing: true
        name_or_id: { get_input: ext_net_name }
        is_external: true
      requirements:
        - authorization_form: auth

    orchestra_router:
      type: tosca.openstack.router
      properties:
        name_or_id: { get_input: router_name }
      requirements:
        - authorization_form: auth
        - external_network: orchestra_external_network

    orchestra_network_one:
      type: tosca.openstack.network
      properties:
        name_or_id: { get_input: network_name_one }
      requirements:
        - authorization_form: auth

    orchestra_network_subnet_one:
      type: tosca.openstack.subnet
      properties:
        name_or_id: { get_input: subnet_name_one }
        ip_version: { get_input: subnet_ip_version }
        cidr: { get_input: subnet_cidr_one }
        allocation_pools: { get_input: subnet_pools_one }
        dns_nameservers: { get_input: subnet_dns_nameservers }
      requirements:
        - authorization_form: auth
        - network: orchestra_network_one
        - router: orchestra_router

    orchestra_security_group_tcp_ingress:
      type: tosca.openstack.security_group.rule
      properties:
        direction: 'ingress'
        ethertype: 'IPv4'
        port_range_min: 1
        port_range_max: 65535
        protocol: 'tcp'
        remote_ip_prefix: '0.0.0.0/0'

    orchestra_security_group_tcp_egress:
      type: tosca.openstack.security_group.rule
      properties:
        direction: 'egress'
        ethertype: 'IPv4'
        port_range_min: 1
        port_range_max: 65535
        protocol: 'tcp'
        remote_ip_prefix: '0.0.0.0/0'

    orchestra_security_group:
      type: tosca.openstack.security_group
      properties:
        name_or_id: { get_input: compute_name }
        description: { get_input: compute_name }
      requirements:
        - authorization_form: auth
        - rule_egress:
            node: orchestra_security_group_tcp_egress
            relationship: tosca.openstack.networking.security_groups_rule_connected_to_security_group
        - rule_ingress:
            node: orchestra_security_group_tcp_ingress
            relationship: tosca.openstack.networking.security_groups_rule_connected_to_security_group

    orchestra_subnet_port_one:
      type: tosca.openstack.subnet_port
      properties:
        name_or_id:  { get_input: subnet_port_one }
      requirements:
        - authorization_form: auth
        - subnet: orchestra_network_subnet_one
        - security_group: orchestra_security_group

    orchestra_floating_ip_one:
      type: tosca.openstack.floating_ip
      requirements:
        - authorization_form: auth
        - network: orchestra_external_network
        - port: orchestra_subnet_port_one

    orchestra_keypair:
      type: tosca.openstack.access_and_security.ssh_keypair
      properties:
        name: { get_input: ssh_keypair_name }
      requirements:
        - authorization_form: auth

    orchestra_compute.file:
      type: tosca.openstack.compute_instance.file
      properties:
        local_file_path: { get_input: local_file_path_for_injection }
        remote_file_path: { get_input: remote_file_path_for_injection }

    orchestra_compute:
      type: tosca.openstack.compute_instance
      properties:
        name_or_id: { get_input: compute_name }
        image: { get_input: compute_image }
        flavor: { get_input: compute_flavor }
      requirements:
        - authorization_form: auth
        - ssh_keypair: orchestra_keypair
        - port_1:
            node: orchestra_subnet_port_one
            relationship: tosca.openstack.compute.connect_port_to_compute
        - injection_1:
            node: orchestra_compute.file
            relationship: tosca.openstack.compute.inject_file_to_compute_instance

    orchestra_software_configuration_environment:
      type: software_configuration_environment
      properties:
        remote_injection: { get_input: remote_file_path_for_injection }

    validate_injection:
      type: tosca.asyncssh.software_configuration.script
      properties:
        username: { get_input: username }
        port: { get_input: ssh_port }
        install_script: { get_input: install_script }
      requirements:
        - compute: orchestra_compute
        - environment: orchestra_software_configuration_environment
        - ip:
            node: orchestra_floating_ip_one
            relationship: tosca.openstack.access_and_security.floating_provider
        - ssh:
            node: orchestra_keypair
            relationship: tosca.openstack.access_and_security.ssh_keypair_provider
      interfaces:
        Standard:
          create:
            implementation: asyncssh_plugin.tasks:create
          start:
            implementation: asyncssh_plugin.tasks:install
            inputs:
              task_retries: 7
              task_retry_interval: 10
          stop:
            implementation: asyncssh_plugin.tasks:uninstall
            inputs:
              task_retries: 7
              task_retry_interval: 10
          delete:
            implementation: asyncssh_plugin.tasks:delete

  outputs:
    ssh_priv:
      value: { get_attribute: [orchestra_keypair, private_key_content] }
